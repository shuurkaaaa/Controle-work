//Task 1
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Find Middle Character</title>
    <script>
        function findMiddleCharacter() {
            // Prompt user for input
            let userInput = prompt("Please enter a word:");

            // Check for canceled input
            if (userInput === null) {
                alert("Canceled.");
                return;
            }

            // Trim input to remove leading and trailing spaces
            userInput = userInput.trim();

            // Validate input for empty value or spaces only
            if (userInput === "") {
                alert("Invalid value");
                return;
            }

            // Calculate the middle character(s)
            let length = userInput.length;
            let middleIndex = Math.floor(length / 2);
            let middleCharacter;

            if (length % 2 === 0) {
                // Even length: get the middle 2 characters
                middleCharacter = userInput[middleIndex - 1] + userInput[middleIndex];
            } else {
                // Odd length: get the middle character
                middleCharacter = userInput[middleIndex];
            }

            // Display the result
            alert(middleCharacter);
        }
    </script>
</head>
<body>
    <button onclick="findMiddleCharacter()">Find Middle Character</button>
</body>
</html>





//Task 2
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Data Processing</title>
    <script>
        const users = [
            {
                id: "701b29c3-b35d-4cf1-a5f6-8b12b29a5081",
                name: "Moore Hensley",
                email: "moorehensley@indexia.com",
                eyeColor: "blue",
                friends: ["Sharron Pace"],
                isActive: false,
                balance: 2811,
                skills: ["ipsum", "lorem"],
                gender: "male",
                age: 37,
            },
            {
                id: "7a3cbd18-57a1-4534-8e12-1caad921bda1",
                name: "Sharlene Bush",
                email: "sharlenebush@tubesys.com",
                eyeColor: "blue",
                friends: ["Briana Decker", "Sharron Pace"],
                isActive: true,
                balance: 3821,
                skills: ["tempor", "mollit", "commodo", "veniam", "laborum"],
                gender: "female",
                age: 34,
            },
            {
                id: "88beb2f3-e4c2-49f3-a0a0-ecf957a95af3",
                name: "Ross Vazquez",
                email: "rossvazquez@xinware.com",
                eyeColor: "green",
                friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
                isActive: false,
                balance: 3793,
                skills: ["nulla", "anim", "proident", "ipsum", "elit"],
                gender: "male",
                age: 24,
            },
            {
                id: "249b6175-5c30-44c6-b154-f120923736f5",
                name: "Elma Head",
                email: "elmahead@omatom.com",
                eyeColor: "green",
                friends: ["Goldie Gentry", "Aisha Tran"],
                isActive: true,
                balance: 2278,
                skills: ["adipisicing", "irure", "velit"],
                gender: "female",
                age: 21,
            },
            {
                id: "334f8cb3-eb04-45e6-abf4-4935dd439b70",
                name: "Carey Barr",
                email: "careybarr@nurali.com",
                eyeColor: "blue",
                friends: ["Jordan Sampson", "Eddie Strong"],
                isActive: true,
                balance: 3951,
                skills: ["ex", "culpa", "nostrud"],
                gender: "male",
                age: 27,
            }
        ];

        function getUniqueSkills(users) {
            const allSkills = users.reduce((acc, user) => {
                acc.push(...user.skills);
                return acc;
            }, []);

            return [...new Set(allSkills)];
        }

        function getTotalBalance(users) {
            return users
                .filter(user => user.friends.length === 2 && user.age < 30)
                .reduce((total, user) => total + user.balance, 0);
        }

        function displayUniqueSkills() {
            const uniqueSkills = getUniqueSkills(users);
            alert("Unique skills: " + uniqueSkills.join(", "));
        }

        function displayTotalBalance() {
            const totalBalance = getTotalBalance(users);
            alert("Total balance of users with exactly two friends and age less than 30: $" + totalBalance);
        }
    </script>
</head>
<body>
    <button onclick="displayUniqueSkills()">Display Unique Skills</button>
    <button onclick="displayTotalBalance()">Display Total Balance</button>
</body>
</html>







// Task 3
Оператор spread дозволяє розгорнути ітеративний об'єкт (наприклад, масив або рядок) у місцях, де очікуються нуль або більше аргументів або елементів. Використовується в основному для літералів масивів та об'єктів, а також для викликів функцій.
Розгортання масиву
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const combinedArray = [...arr1, ...arr2];
console.log(combinedArray); 
Аргументи функції
function sum(x, y, z) {
  return x + y + z;
}
const numbers = [1, 2, 3];
console.log(sum(...numbers));
Розгортання об'єкту
const obj1 = { a: 1, b: 2 };
const obj2 = { c: 3, d: 4 };
const combinedObject = { ...obj1, ...obj2 };
console.log(combinedObject); 
Spread оператор використовується для розгортання елементів у масивах, об'єктах і викликах функцій.Spread оператор розгортає або розпаковує елементи.Spread оператор використовується у викликах функцій, літералах масивів та об'єктів.
Оператор rest дозволяє представляти невизначену кількість аргументів як масив. Використовується в списках параметрів функцій для збору решти аргументів у масив.
Параметри функції
function sum(...numbers) {
  return numbers.reduce((acc, curr) => acc + curr, 0);
}
console.log(sum(1, 2, 3, 4));
Деструктуризація масивів
const [first, second, ...rest] = [1, 2, 3, 4, 5];
console.log(first);  
console.log(second); 
console.log(rest);  
Деструктуризація об'єктів
const { a, b, ...rest } = { a: 1, b: 2, c: 3, d: 4 };
console.log(a);  
console.log(b);  
console.log(rest); 
Rest оператор використовується для збору залишкових елементів у списках параметрів функцій та деструктуризації.Rest оператор збирає або пакує елементи у масив.
Rest оператор використовується у списках параметрів функцій та деструктуризації.




//Task 4
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Names List</title>
    <style>
        ul {
            list-style-type: none;
            padding: 0;
        }
        li {
            cursor: pointer;
            padding: 5px;
            margin: 5px 0;
            background-color: #f0f0f0;
            border-radius: 4px;
        }
        li:hover {
            background-color: #ddd;
        }
    </style>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const users = ["Alice", "Bob", "Charlie", "David", "Eve"];
            const userList = document.getElementById("userList");

            users.forEach(user => {
                const listItem = document.createElement("li");
                listItem.textContent = user;
                listItem.addEventListener("click", function() {
                    alert(`Hello, ${user}`);
                });
                userList.appendChild(listItem);
            });
        });
    </script>
</head>
<body>
    <h1>User Names List</h1>
    <ul id="userList"></ul>
</body>
</html>



